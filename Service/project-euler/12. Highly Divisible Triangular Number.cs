public class Euler12
{
    /* 
        Sequence of triangular numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.  
    
        The first ten terms are 1, 3, 5, 10, 15, 21, 28, 36, 45, 55...

        28 is the firs triangle to have over 5 divisors. Which is the value of the first triangle number to have over five hundred divisors.
    */

   public int FindTriangleNumberByDivisorCount(int minNumDivisors)
    {
        int triangleNum = 0;
        int n = 1;

        while (true)
        {
            triangleNum += n; // Generate triangle number directly
            n++;

            int divisorCount = GetDivisorCount(triangleNum);
            
            if (divisorCount > minNumDivisors)
            {
                return triangleNum;
            }
        }
    }

    private int GetDivisorCount(int n)
    {
        int count = 0;
        int sqrtN = (int)Math.Sqrt(n);

        for (int i = 1; i <= sqrtN; i++)
        {
            if (n % i == 0)
            {
                count += 2; // Count both i and n / i as divisors
            }
        }

        // Adjust count if n is a perfect square
        if (sqrtN * sqrtN == n)
        {
            count--;
        }

        return count;
    }
}