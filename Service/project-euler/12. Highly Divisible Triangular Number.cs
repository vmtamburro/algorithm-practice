public class Euler12
{
    /* 
        Sequence of triangular numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.  
    
        The first ten terms are 1, 3, 5, 10, 15, 21, 28, 36, 45, 55...

        28 is the firs triangle to have over 5 divisors. Which is the value of the first triangle number to have over five hundred divisors.
    */

    public int FindTriangleNumberByDivisorCount(int minNumDivisors){
        minNumDivisors  = 500;
        int numDivisors = 0;
        List<int> naturalNumbers = new List<int>(){1};

        while(numDivisors < minNumDivisors){
            naturalNumbers.Add(naturalNumbers.Max() + 1);
            var triangleNum = naturalNumbers.Sum();
            
            var divisorCount = GetAllFactors(triangleNum).Count();
            
            if(divisorCount > minNumDivisors){
                return triangleNum;
            }
        }
        return -1;
    }

     public List<int> GetAllFactors(int n)
    {
        List<int> factors = new List<int>();

        // Check for divisors up to the square root of n
        for (int i = 1; i <= Math.Sqrt(n); i++)
        {
            if (n % i == 0)
            {
                factors.Add(i);
                if (i != n / i) // Avoid adding the square root twice for perfect squares
                {
                    factors.Add(n / i);
                }
            }
        }

        factors.Sort(); // Sorting the factors in ascending order
        return factors;
    }
}